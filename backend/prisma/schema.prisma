generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  password  String
  role      String    @default("VIEWER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[] @relation("UserProjects")
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  epics       Epic[]
  initiatives Initiative[]
  owner       User         @relation("UserProjects", fields: [ownerId], references: [id])
  sprints     Sprint[]     @relation("ProjectSprints")
}

model Epic {
  id          String   @id @default(uuid())
  name        String
  description String?
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  stories     Story[]
}

model Story {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  acceptanceCriteria String?
  storyPoints        Int?
  priority           String   @default("medium")
  epicId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  epic               Epic     @relation(fields: [epicId], references: [id])
  tasks              Task[]
}

model Task {
  id             String    @id @default(uuid())
  name           String
  description    String?
  status         String    @default("todo")
  priority       String    @default("medium")
  estimatedHours Float?
  actualHours    Float?
  assignedTo     String?
  completedAt    DateTime?
  storyId        String
  sprintId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sprint         Sprint?   @relation(fields: [sprintId], references: [id])
  story          Story     @relation(fields: [storyId], references: [id])
}

model Sprint {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  projectId String
  project   Project  @relation("ProjectSprints", fields: [projectId], references: [id])
  tasks     Task[]
}

model Initiative {
  id          String   @id @default(uuid())
  title       String
  description String?
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  okrs        OKR[]
  risks       Risk[]
}

model Risk {
  id           String     @id @default(uuid())
  description  String
  probability  Int
  impact       Int
  mitigation   String?
  initiativeId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
}

model OKR {
  id           String     @id @default(uuid())
  objective    String
  keyResult    String
  progress     Int        @default(0)
  initiativeId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
}
